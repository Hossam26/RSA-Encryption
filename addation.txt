string result = {};
	char carry = 0;
	int l1 = s1.length();
	int l2 = s2.length();
	if (s1.length()<=s2.length())
	{
		for (int i = l1 - 1, j = l2 - 1; i >= 0; i--, j--) {

			int sum = (s1[i] - '0') + (s2[j] - '0') + carry;
			result.push_back(sum % 10 + '0');
			carry = sum / 10;


		}
		for (int i = l2 - l1 - 1; i >= 0; i--) {

			int sum = (s2[i] - '0') + carry;
			result.push_back(sum % 10 + '0');
			carry = sum / 10;
		}
		if (carry) {
			result.push_back(carry +'0');

		}
		}
	else {
		for (int i = l2 - 1,j=l1-1; i >= 0; i--,j--) {

			int sum = (s1[j]-'0') + (s2[i] -'0')+ carry;
			result.push_back(sum % 10+'0');
			carry = sum / 10;


		}
		for (int i = l1-l2- 1; i >=0; i--) {

			int sum = (s1[i]-'0') + carry;
			result.push_back(sum % 10+'0');
			carry = sum / 10;
		}
		if (carry) {
			result.push_back(carry+'0');

		}
	}
	reverse(result.begin(), result.end());
	return result;
}

string biginteger::multpication(string s1, string s2)
{
	string result = {};
	//////////your code
	return result;
}

string biginteger::subtrication(string s1, string s2)
{
	string result = {};
	//////////your code
	return result;